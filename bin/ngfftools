#!/usr/bin/perl -w
use strict;
use Data::Dumper;
use FindBin qw($RealBin);
use Exporter;
use Getopt::Long;
use Cwd qw/abs_path/;
use lib "$RealBin/../lib";
use ngfftools qw/$parsers $autofillers $printers detector_informat detector_outformat isPossibleCombination merger abs2rel rel2abs seq extract/;

my $usage = "
Program:
    ngfftools - tools for processing Next-generation Genomic Feature Format (ngff) files

Version:
    1.00	2021-08-03
    1.01	2022-10-01

Usage:
    ngfftools [module_name] [Options]
    ngfftools [module_name] -help for detail parameter information of specific module

Modules:
    format        format conversion among ngff, gtf, gff3 format.
    grep          grep value in 1st-8th column or tags in attribute column.
    merge         merge multiple annotation files into one file.
    extract       retrieve child or parent elements of the given id(s).
    abs2rel       convert absolute position to relative position.
    rel2abs       convert relative position to absolute position based on one reference ngff.
    seq           retrieve sequence in annotation file.

Authors:
    Deng Cao,    concepts, design, algorithm
    Huang Ziyan, coding implementation
";
my $usage_form = "
Usage:
    ngfftools format [Options]

Options:
    -I |--infile         <str>  input file, accepted format: ngff, gtf, gff3.
    -O |--outfile        <str>  output file, accepted format: ngff, gtf, gff3.
    -IF|--informat       <str>  input file format (ngff, gtf, gff3) 
                                default is auto-detected.
    -OF|--outformat      <str>  output file format (ngff, gtf, gff3)
                                default is auto-detected based on the suffix of outfile.
    -T |--name_type      <str>  name type (not_ncbi, ncbi).
	                        if set 'ncbi' then product ID will be
				protein_id(CDS), product name(miRNA), default is 'not_ncbi'.
    -P |--prefix         <str>  name prefix in output annotation file, default is null.
        --help                  print this help information.

Example:
    ngfftools format --infile template.ngff --informat ngff --outfile OUT.gtf
    cat template.ngff | ngfftools format --infile - --informat ngff --outfile OUT.gtf
    ngfftools format --infile template.gff3 --informat gff3 --outformat ngff --prefix template_ >GFF3.ngff
";
my $usage_grep = "
Usage:
    ngfftools grep [Options]

Options:
    -I |--infile         <str>  input file, accepted format: ngff.
    -O |--outfile        <str>  output file, accepted format: ngff.
    -IF|--informat       <str>  input file format (ngff) 
                                default is auto-detected.
    -OF|--outformat      <str>  output file format (ngff)
                                default is auto-detected based on the suffix of outfile.
    -P |--prefix         <str>  name prefix in output annotation file, default is null.
    -G |--grep           <str>  grep string: 'TAG OPERATOR VALUE'
        --help                  print this help information

TAG contains:
    1. 1st-8th column:seqId,start,end,strand,level,featureType,id,parentId
    2. tag in attribute column

OPERATOR contains:
    compare number: >,<,==,<=,<=,!=
    compare string: ==
    pattern matching: =~,!~

VALUE contains:
    number, \"string\", /value/(pattern matching)

Example:
    ngfftools grep --infile template.ngff --outfile grep1.ngff --grep 'seqId !~ /ChrM/'
    ngfftools grep --infile template.ngff --outfile grep2.ngff --grep 'level == \"locus\"'
    ngfftools grep --infile template.ngff --outfile grep3.ngff --grep 'level == \"processed\" && product_biotype == \"ORF\"'
    ngfftools grep --infile template.ngff --outfile grep4.ngff --grep 'level == \"processed\" && parentId != \"L01.pt1\"'

";

#now just support format ngff
my $usage_merge = "
Usage:
    ngfftools merge [Options]

Options:
    -O |--outfile         <str>  output file, accepted format: ngff
    -P |--prefix          <str>  name prefix in output annotation file, default is null.
    -L |--list            <str>  list of input ngff filenames, two columns (file prefix).
    -R |--reference       <str>  reference annotation file, default is the first ngff annotation file
                                 or the first gff3/gtf annotation file (without ngff file in list)
    -OV|--overlap_percent <num>  the min overlap percent is the ratio (<overlap length>/<locus length>)
                                 when merge two loci, default is 0.5.
    -H |--header          <str>  copy the header in this FILE to output ngff file. By default, header will
                                 inherit from the first ngff annotation file.
         --help                  print this help information

Example:
    ngfftools merge --list merge_gff3.list --outfile merge_gff3.ngff --overlap_percent 0.8 2>merge_gff3.log
    ngfftools merge --list merge_gtf.list --outfile merge_gtf.ngff --overlap_percent 0.8 2>merge_gtf.log
    ngfftools merge --list mergeTwo.list --outfile mergeTwo.ngff --overlap_percent 0.8 2>mergeTwo.log

merge.list (example) (template.ngff is the reference):
    forMerge.gtf    gtf_
    template.ngff
    forMerge.gff3   gff3_

merge.list (example) (template.gtf is the reference):
    forMerge.gtf    gtf_
    forMerge.gff3   gff3_
";
my $usage_abs2rel = "
Usage:
    ngfftools abs2rel [Options]
Options:
    -I |--infile         <str>  input file, accepted format: ngff.
    -O |--outfile        <str>  output file, accepted format: ngff.
    -IF|--informat       <str>  input file format (ngff) 
                                default is auto-detected.
    -OF|--outformat      <str>  output file format (ngff)
                                default is auto-detected based on the suffix of outfile.
    -P |--prefix         <str>  name prefix in output annotation file, default is null.
    -C |--abs2rel        <str>  'level=relative' (level can be product, processed...)
        --help                  print this help information

Example:
    ngfftools abs2rel --abs2rel 'product=relative' --infile template.ngff --outfile product_relative.ngff
    ngfftools abs2rel --abs2rel 'processed=relative;product=relative' \\
    --infile template.ngff --outfile proc_prod_relative.ngff

";
my $usage_rel2abs = "
Usage:
    ngfftools rel2abs [Options]

Options:
    -I |--infile         <str>  input file, accepted format: ngff.
    -O |--outfile        <str>  output file, accepted format: ngff.
    -IF|--informat       <str>  input file format (ngff) 
                                default is auto-detected.
    -OF|--outformat      <str>  output file format (ngff)
                                default is auto-detected based on the suffix of outfile.
    -RE|--RELposFile     <str>  relative position ngff file.
        --help                  print this help information

Example:
    ngfftools rel2abs --infile template.ngff --RELposFile relative.ngff --outfile ABSpos.ngff
    ngfftools rel2abs --infile Felis_catus_9.0.ngff --RELposFile relative_fromGff.ngff --outfile ABSpos2.ngff

relative.ngff example (product level contains CDS(protein_id); processed level contains exon):
    Chr1    -3      -5      +       product mature  L01.t11.p1      L01.t11 product_biotype=miRNA;
    Chr1    -1      -3      +       product mature  L01.t11.p2      L01.t11 product_biotype=miRNA;
    Chr1    -4      -6      +       product mature  L01.t11.p2      L01.t11 product_biotype=miRNA;
    Chr1    -10     -12     -       product CDS     L01.t12.p1      L01.t12 product_biotype=ORF;

the simplest relative.ngff example (must have: start end level id):
    .       -1    -3    .       product     .     XP_011287422.1  .       .
    .       -173  -177  .       product     .     XP_011287422.1  .       .
    .       -3    -6    .       processed   .     rna3            .       .
";
my $usage_seq = "
Usage:
    ngfftools seq [Options]

Options:
    -I |--infile         <str>  input file, accepted format: ngff.
    -IF|--informat       <str>  input file format (ngff) 
                                default is auto-detected.
    -OP|--outpre         <str>  the prefix of output files.
    -GM|--genomeFile     <str>  genome sequence file.
    -S |--species_type   <str>  species type for chooseing mitochondrion codon system
                                (Vertebrate/Yeast/Invertebrate/Protozoan).
        --help                  print this help information

output contains four sequence files: {outpre}_nucleotide.fasta; {outpre}_CDS.fasta; 
                               {outpre}_pep.fasta; {outpre}_regulator.fasta
Example:
    ngfftools seq --infile template.ngff --genomeFile test.fasta \\
    --species_type Vertebrate --outpre TEST  2>retrieveSequence.log
";

my $usage_extract = "
Usage:
    ngfftools extract [Options]

Options:
    -I |--infile         <str>  input file, accepted format: ngff, gtf, gff3.
    -O |--outfile        <str>  output file, accepted format: ngff.
    -IF|--informat       <str>  input file format (ngff, gtf, gff3) 
                                default is auto-detected.
    -OF|--outformat      <str>  output file format (ngff)
                                default is auto-detected based on the suffix of outfile.
    -U |--ids           <str>   id:<parent/child>, multiple ids use \",\" to separate them.
        --help                  print this help information

Example:
    ngfftools extract --infile template.ngff --informat ngff --ids L01.t1:parent:L01.t2:child > extract.ngff
    ngfftools extract --infile template.ngff --informat ngff --ids hsa-miR-1302:parent > extract2.ngff
";
my ( $overlap_percent, $prefix, $outpre, $name_type ) = ( 0.5, "", "out", "not_ncbi" );
my ( $level, $id, $ind, $simple );
my ( $infile, $outfile, $informat, $outformat, $grep, $list, $reference, $header, $abs2rel, $RELposFile, $genomeFile, $species_type, $ids, $help );
GetOptions(
    "infile|I:s"        => \$infile,
    "outfile|O:s"       => \$outfile,
    "informat|IF:s"     => \$informat,
    "outformat|OF:s"    => \$outformat,
    "prefix|P:s"          => \$prefix,
    "grep|G:s"          => \$grep,
    "list:s"            => \$list,
    "reference|R:s"       => \$reference,
    "overlap_percent:i" => \$overlap_percent,
    "header:s"          => \$header,
    "abs2rel:s"         => \$abs2rel,
    "outpre:s"          => \$outpre,
    "RELposFile|RE:s"      => \$RELposFile,
    "genomeFile:s"      => \$genomeFile,
    "species_type:s"    => \$species_type,
    "ids:s"            => \$ids,
    "simple:s"          => \$simple,
    "name_type|T:s"       => \$name_type,
    "help|man|usage|h"  => \$help
);

## check parameters
if ( @ARGV == 0 || $help ) {
    print STDERR $usage and exit(255);
}
my $moduleName = shift @ARGV;

my %modules = (
    'format'  => 1,
    'grep'    => 1,
    'merge'   => 1,
    'extract' => 1,
    'abs2rel' => 1,
    'rel2abs' => 1,
    'seq'     => 1
);
if ( !exists $modules{$moduleName} ) {
    print STDERR "ERROR: Unknown module name: [$moduleName]\n";
    print STDERR $usage;
    exit(255);
}
if ( $moduleName eq "format" && ( $help || !defined $infile ) ) {
    print STDERR $usage_form;
    exit(255);
}
if ( $moduleName eq "grep" && ( $help || !defined $infile ) ) {
    print STDERR $usage_grep;
    exit(255);
}
if ( $moduleName eq "merge" && ( $help || !defined $list ) ) {
    print STDERR $usage_merge;
    exit(255);
}
if ( $moduleName eq "abs2rel" && ( $help || !defined $infile ) ) {
	#if ( $moduleName eq "abs2rel" && ( $help) ) {
    print STDERR $usage_abs2rel;
    exit(255);
}
if ( $moduleName eq "extract" && ( $help || !defined $infile ) ) {
    print STDERR $usage_extract;
    exit(255);
}
if ( $moduleName eq "rel2abs" && ( $help || !defined $infile ) ) {
    print STDERR $usage_rel2abs;
    exit(255);
}
if ( $moduleName eq "seq" && ( $help || !defined $infile ) ) {
    print STDERR $usage_seq;
    exit(255);
}

## public codes
my $json = {};

# infile
if ( $moduleName ne "merge" ) {
    my $infh;
    $infh = openfh( $infile, "input" );
    if ( defined $informat && $informat ne "gff3" && $informat ne "ngff" && $informat ne "gtf" ) {
        print STDERR "Wrong inpput format, need be one of these:ngff,gff3,gtf,exit...\n";
        exit(255);
    }
    $informat = ( defined $informat ) ? $informat : &detector_informat($infh);
    print STDERR "#InFormat:$informat\n";
    close $infh;
    $infh = openfh( $infile, "input" );

    # creat object
    print STDERR "#store infile is beginning.\n";
    $json = &{ $parsers->{ lc($informat) } }( $infh, $prefix, $name_type, $simple ) || ( ( print STDERR "not valid $informat format\n" ) and exit(1) );
    #print Dumper $json;
    print STDERR "#store infile is ending.\n";
    close $infh;
}

## conventer
if ( $moduleName eq 'format' ) {
    if ( defined $outfile ) {
        $outformat = ( defined $outformat ) ? $outformat : &detector_outformat($outfile);
    }
    else {
        if ( defined $outformat ) {
            $outformat = $outformat;
        }
        else {
            print STDERR "You need set the outformat...\n";
            exit(255);
        }
    }
    print STDERR "#OutFormat:$outformat\n";

    #this subroutine check the allowed informat-outformat pairs(stored in hash).
    &isPossibleCombination( $informat, $outformat );
    my $outfh = openfh( $outfile, "output" );
    print STDERR "#print ourput is beginning.\n";
    &{ $printers->{ lc($outformat) } }( $json, $outfh );
    print STDERR "#print ourput is ending.\n";
    close $outfh;
}

if ( $moduleName eq 'grep' ) {

    #example: seqId !~ /chrM/ && ( id =~ /^MSTG/ || id =~ /^AT/i )
    #example: $json->...->{seqId} !~ /chrM/ && ( $json->...->{id} =~ /^MSTG/ || $json->...->{id} =~ /^AT/i )
    #eval '0 && ( 1 || 0 ) && 1 && 0'
    #print STDERR Dumper $json;
    my $grep_Reg    = $grep;
    my $grep_nonReg = $grep;
    $grep_Reg    =~ s/([^&|\(\)!=~><\s]+)\s*([&|\(\)!=~><]+)\s*([^&|\(\)!=~><\s]+)/&replaceReg($1,$2,$3)/ge;
    $grep_nonReg =~ s/([^&|\(\)!=~><\s]+)\s*([&|\(\)!=~><]+)\s*([^&|\(\)!=~><\s]+)/&replace($1,$2,$3)/ge;

    foreach $level ( sort keys %{$json} ) {
        next if ( $level eq "header" || $level eq "input_format" || $level eq "allowed_output_format" || $level eq "chromosome" );
        foreach $id ( sort keys %{ $json->{$level}->{"ids"} } ) {
            foreach $ind ( 0 .. $#{ $json->{$level}->{"ids"}->{$id}->{nonRegulator} } ) {
                my $final = 0;
                $final = 1 if eval($grep_nonReg);
                if ( !$final ) {
                    delete ${ $json->{$level}->{"ids"}->{$id}->{nonRegulator} }[$ind];
                }
            }
            foreach my $regulator_biotype ( sort keys %{ $json->{$level}->{"ids"}->{$id}->{regulator} } ) {
                foreach my $ind ( 0 .. $#{ $json->{$level}->{"ids"}->{$id}->{regulator}->{$regulator_biotype} } ) {
                    my $final = 0;
                    $final = 1 if eval($grep_Reg);
                    if ( !$final ) {
                        delete ${ $json->{$level}->{"ids"}->{$id}->{regulator}->{$regulator_biotype} }[$ind];
                    }
                }
            }
        }
    }

    my $outfh = openfh( $outfile, "output" );
    print STDERR "#print ourput is beginning.\n";
    &{ $printers->{'ngff'} }( $json, $outfh ,'grep');
    print STDERR "#print ourput is ending.\n";
    close $outfh;

}

if ( $moduleName eq 'merge' ) {
    open LIST, "<$list";
    my $file_reference;
    my @files_need2merge;
    my %Pre;
    my $first = 0;
    while (<LIST>) {
        chomp;
        my ( $file, $prefix ) = split;
        if ( defined $prefix ) {
            $Pre{$file} = $prefix;
        }
        else {
            $Pre{$file} = "sub_";
        }
        if ( $. == 1 ) {
            $file_reference = $file;
        }
        elsif ( $file =~ /ngff$/ && $first == 0 ) {
            $file_reference = $file;
            $first          = 1;
        }
        push @files_need2merge, $file;
    }
    close LIST;
    my @headers;
    if ( defined $header ) {
        open HEADER, $header;
        while (<HEADER>) {
            push @headers, $_;
        }
    }
    @files_need2merge = grep { !/$file_reference/ } @files_need2merge;
    print STDERR "#file_reference is $file_reference\n";
    print STDERR "#files_need2merge is:" . join( "\t", @files_need2merge ) . "\n";
    my $infh_reference;
    $infh_reference = openfh( $file_reference, "input" );
    my $file_reference_format = &detector_informat($infh_reference);
    close $infh_reference;
    $infh_reference = openfh( $file_reference, "input" );
    print STDERR "#store reference file is beginning.\n";
    $json = &{ $parsers->{ lc($file_reference_format) } }( $infh_reference, $prefix ) || ( ( print STDERR "not valid $informat format\n" ) and exit(1) );
    print STDERR "#store reference file is ending.\n";

    close $infh_reference;

    foreach my $i ( 0 .. $#files_need2merge ) {
        my $infile = $files_need2merge[$i];
        my $infh_sub;
        $infh_sub = openfh( $infile, "input" );
        my $informat = &detector_informat($infh_sub);
        close $infh_sub;
        $infh_sub = openfh( $infile, "input" );
        my $sub_json = {};    #storedasjson-like.
        print STDERR "#store $infile is beginning.\n";
        $sub_json = &{ $parsers->{ lc($informat) } }( $infh_sub, $Pre{$infile} ) || ( ( print STDERR "not valid $informat format\n" ) and exit(1) );
        print STDERR "#store $infile is ending.\n";
        my $time = $i + 1;
        print STDERR "#start merge file $infile($time times)\n";
        &merger( $json, $sub_json, $file_reference, $infile, $overlap_percent, @headers );
        print STDERR "#finish merge file $infile($time times)\n";
        close $infh_sub;
    }
    if ( defined $outfile ) {
        $outformat = ( defined $outformat ) ? $outformat : &detector_outformat($outfile);
    }
    else {
        if ( defined $outformat ) {
            $outformat = $outformat;
        }
        else {
            print STDERR "You need set the outformat...\n";
            exit(255);
        }
    }
    print STDERR "#OutFormat:$outformat\n";

    #this subroutine check the allowed informat-outformat pairs(stored in hash).
    my $outfh = openfh( $outfile, "output" );
    print STDERR "#print ourput is beginning.\n";

    &{ $printers->{ lc($outformat) } }( $json, $outfh );
    print STDERR "#print ourput is ending.\n";
    close $outfh;
}

if ( $moduleName eq 'abs2rel' ) {
    abs2rel( $json, $abs2rel );
    my $outfh = openfh( $outfile, "output" );
    print STDERR "#print ourput is beginning.\n";
    &{ $printers->{'ngff'} }( $json, $outfh );
    print STDERR "#print ourput is ending.\n";

}

if ( $moduleName eq 'rel2abs' ) {
    my $outfh = openfh( $outfile, "output" );
    rel2abs( $RELposFile, $outfh );
    close $outfh;
}

if ( $moduleName eq 'seq' ) {
    if ( !defined $genomeFile ) {
        print STDERR "#Must provide genomeFile to retrieve sequence\n";
        exit(255);
    }
    seq( $json, $genomeFile, $species_type, $outpre );
}

if ( $moduleName eq 'extract' ) {
    my $UNIT;
    my $outfh = openfh( $outfile, "output" );
    my @tmp   = split /:|,/, $ids;
    for my $i ( 0 .. ( $#tmp - 1 ) / 2 ) {
        $UNIT->{ $tmp[ $i * 2 ] } = $tmp[ $i * 2 + 1 ];
    }
    extract( $json, $UNIT, $outfh );
}

####################################### sub functin ###########################
sub ArrayToHash {
    my $str = shift @_;
    my %hash;
    my @tmp = split /;|=/, $str;
    for ( my $i = 0 ; $i < $#tmp ; $i += 2 ) {
        my $tag   = $tmp[$i];
        my $value = $tmp[ $i + 1 ];
        $hash{$tag} = $value;
    }
    return %hash;
}

sub replace {
    my ( $leftValue, $operator, $rightValue ) = @_;

    if ( $operator eq "==" && $rightValue =~ /^[0-9\.\+\-]{0,}[Ee]{0,1}[0-9\.\+\-]{1,}$/ ) {

        # numeric
    }
    elsif ( $operator eq "==" ) {

        # string
        $operator = "eq";
    }
    elsif ( $operator eq "!=" && $rightValue =~ /^[0-9\.\+\-]{0,}[Ee]{0,1}[0-9\.\+\-]{1,}$/ ) {
    }
    elsif ( $operator eq "!=" ) {
        $operator = "ne";
    }
    my $newLeftValue = "";
    if ( $leftValue eq 'seqId' ) {
        $newLeftValue = '$json->{$level}->{ids}->{$id}->{seqId}';
    }
    elsif ( $leftValue eq 'start' ) {
        $newLeftValue = '${ $json->{$level}->{"ids"}->{$id}->{nonRegulator} }[$ind]->[1]';
    }
    elsif ( $leftValue eq 'end' ) {
        $newLeftValue = '${ $json->{$level}->{"ids"}->{$id}->{nonRegulator} }[$ind]->[2]';
    }
    elsif ( $leftValue eq 'strand' ) {
        $newLeftValue = '${ $json->{$level}->{"ids"}->{$id}->{nonRegulator} }[$ind]->[3]';
    }
    elsif ( $leftValue eq 'level' ) {
        $newLeftValue = '$level';
    }
    elsif ( $leftValue eq 'featureType' ) {
        $newLeftValue = '${ $json->{$level}->{"ids"}->{$id}->{nonRegulator} }[$ind]->[4]';
    }
    elsif ( $leftValue eq 'id' ) {
        $newLeftValue = '$id';
    }
    elsif ( $leftValue eq 'parentId' ) {
        ( my $rightValue2 = $rightValue ) =~ s/"//g;
        $newLeftValue = 'eval{my $tttmp = join(",",@{[keys %{ $json->{$level}->{"ids"}->{$id}->{"parentId"} }]}); $tttmp=~ s/^(';
        $newLeftValue .= $rightValue2 . '),.*/$1/;$tttmp=~ s/.*,(' . $rightValue2 . '),.*/$1/;$tttmp=~ s/.*(' . $rightValue2 . ')$/$1/; $tttmp';
        $newLeftValue .= " " . $operator . " " . $rightValue . "}";
        return $newLeftValue;
    }
    else {
        ( my $rightValue2 = $rightValue ) =~ s/"//g;
        $newLeftValue = 'eval{my %thisAttributesAll = ( %{ $json->{$level}->{ids}->{$id}->{nonRegulator_shared_attributes} },';
        $newLeftValue .= ' ArrayToHash( ${ $json->{$level}->{"ids"}->{$id}->{nonRegulator} }[$ind]->[5] ) ); ';
        $newLeftValue .= 'if(!exists $thisAttributesAll{' . $leftValue . '}){return 0}; $thisAttributesAll{';
        $newLeftValue .= $leftValue . '} =~ s/.*(^|,)(' . $rightValue2 . ')(,|$).*/$2/; $thisAttributesAll{' . $leftValue . '}';
        $newLeftValue .= " " . $operator . " " . $rightValue . "}";
        return $newLeftValue;
    }
    return $newLeftValue . " " . $operator . " " . $rightValue;
}

sub replaceReg {
    my ( $leftValue, $operator, $rightValue ) = @_;
    if ( $operator eq "==" && $rightValue =~ /^[0-9\.\+\-]{0,}[Ee]{0,1}[0-9\.\+\-]{1,}$/ ) {

        # numeric
    }
    elsif ( $operator eq "==" ) {

        # string
        $operator = "eq";
    }
    elsif ( $operator eq "!=" && $rightValue =~ /^[0-9\.\+\-]{0,}[Ee]{0,1}[0-9\.\+\-]{1,}$/ ) {
    }
    elsif ( $operator eq "!=" ) {
        $operator = "ne";
    }

    my $newLeftValue = "";
    if ( $leftValue eq 'seqId' ) {
        $newLeftValue = '$json->{$level}->{ids}->{$id}->{seqId}';
    }
    elsif ( $leftValue eq 'start' ) {
        $newLeftValue = '${ $json->{$level}->{"ids"}->{$id}->{regulator}->{$regulator_biotype} }[$ind]->[1]';
    }
    elsif ( $leftValue eq 'end' ) {
        $newLeftValue = '${ $json->{$level}->{"ids"}->{$id}->{regulator}->{$regulator_biotype} }[$ind]->[2]';
    }
    elsif ( $leftValue eq 'strand' ) {
        $newLeftValue = '${ $json->{$level}->{"ids"}->{$id}->{regulator}->{$regulator_biotype} }[$ind]->[3]';
    }
    elsif ( $leftValue eq 'level' ) {
        $newLeftValue = '$level';
    }
    elsif ( $leftValue eq 'featureType' ) {
        $newLeftValue = '${ $json->{$level}->{"ids"}->{$id}->{regulator}->{$regulator_biotype} }[$ind]->[4]';
    }
    elsif ( $leftValue eq 'id' ) {
        $newLeftValue = '$id';
    }
    elsif ( $leftValue eq 'parentId' ) {
        ( my $rightValue2 = $rightValue ) =~ s/"//g;
        $newLeftValue = 'eval{my $tttmp = join(",",@{[keys %{ $json->{$level}->{"ids"}->{$id}->{"parentId"} }]}); $tttmp=~ s/^(';
        $newLeftValue .= $rightValue2 . '),.*/$1/;$tttmp=~ s/.*,(' . $rightValue2 . '),.*/$1/;$tttmp=~ s/.*(' . $rightValue2 . ')$/$1/; $tttmp';
        $newLeftValue .= " " . $operator . " " . $rightValue . "}";
        return $newLeftValue;
    }
    else {    #grep feature is in attrbutes line
        ( my $rightValue2 = $rightValue ) =~ s/"//g;
        $newLeftValue = 'eval{my %thisAttributesAll = ( %{ $json->{$level}->{ids}->{$id}->{regulator_shared_attributes} },';
        $newLeftValue .= ' ArrayToHash( ${ $json->{$level}->{"ids"}->{$id}->{regulator}->{$regulator_biotype} }[$ind]->[5] ) ); ';
        $newLeftValue .= 'if(!exists $thisAttributesAll{' . $leftValue . '}){return 0}; $thisAttributesAll{';
        $newLeftValue .= $leftValue . '} =~ s/.*(^|,)(' . $rightValue2 . ')(,|$).*/$2/; $thisAttributesAll{' . $leftValue . '}';
        $newLeftValue .= " " . $operator . " " . $rightValue . "}";
        return $newLeftValue;
    }
    return $newLeftValue . " " . $operator . " " . $rightValue;
}

sub openfh {
    my ( $file, $type ) = @_;
    my $fh;
    if ( $type eq "input" ) {
        if ( defined $file ) {
            print STDERR "input is $file\n";
            if ( $file =~ /\.gz$/ ) {
                open $fh, "zcat $file|" || die "Cannot open $file:$!\n";
            }
            else {
                open $fh, "<$file" || die "Cannot open $file:$!\n";
            }
        }
        else {
            $fh = \*STDIN;
        }
    }
    elsif ( $type eq "output" ) {
        if ( defined $file ) {
            open $fh, ">$file" || die "Cannot open $file:$!\n";
        }
        else {
            $fh = \*STDOUT;
        }
    }
    return $fh;
}
